/*
 * This file is part of TiPi (a Toolkit for Inverse Problems and Imaging)
 * developed by the MitiV project.
 *
 * Copyright (c) 2014 the MiTiV project, http://mitiv.univ-lyon1.fr/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

//# include <common.javax>
//# if ${type_id} != ${DOUBLE}
//#     def cast = (${type})
//#     def zero = 0.0F
//#     def one  = 1.0F
//# else
//#     def cast =
//#     def zero = 0.0
//#     def one  = 1.0
//# end
package ${package};

import mitiv.base.Shape;
import mitiv.conv.Convolution;
import mitiv.linalg.shaped.ShapedVectorSpace;

import org.jtransforms.fft.${Type}FFT_${rank}D;

/**
 * Implements FFT-based convolution for ${rank}D arrays of ${type}'s.
 *
 * @author Éric Thiébaut
 */
class ${className} extends Convolution${Type} {

    /** FFT operator. */
    private ${Type}FFT_${rank}D fft = null;

    /** The operator R. */
    private final PushPullOperator R;

    /** The operator S. */
    private final PushPullOperator S;

    //# for k in 1:${rank}
    //#     def kth = ${}{nth_${k}}
    /** Number of element along ${kth} dimension of the work space. */
    private final int dim${k};

    //# end
    /**
     * Create a new convolution operator for ${rank}D arrays of ${type}'s.
     *
     * <p> This protected constructor should not be directly used.  Call {@link
     * Convolution#build(Shape, ShapedVectorSpace, int[], ShapedVectorSpace,
     * int[]) instead. </p>
     *
     * @param wrk
     *        The dimensions of the work space. If {@code null}, the dimensions
     *        of the work space are automatically computed to be the smallest
     *        dimensions suitable for the FFT (see
     *        {@link FFTUtils#bestDimension(int)}) and large enough to encompass
     *        the input and output dimensions. If {@code wrk} is {@code null},
     *        it is probably better to left the offsets unspecified and set
     *        {@code inpOff} and {@code outOff} to be {@code null}.
     *
     * @param inp
     *        The input space.
     *
     * @param inpOff
     *        The position of the input region within the work space. If
     *        {@code null}, the input region is assumed to be centered;
     *        otherwise, it must have as many values as the rank of the input
     *        and output spaces of the operator.
     *
     * @param out
     *        The output space.
     *
     * @param outOff
     *        The position of the output region within the work space. If
     *        {@code null}, the output region assumed to be centered; otherwise,
     *        it must have as many values as the rank of the input and output
     *        spaces of the operator.
     *
     * @see Convolution#build(Shape, ShapedVectorSpace, int[],
     *      ShapedVectorSpace, int[])
     */
    public ${className}(Shape wrk,
                                ShapedVectorSpace inp, int[] inpOff,
                                ShapedVectorSpace out, int[] outOff) {
        /* Initialize super class and check rank and dimensions (element type
           is checked by the super class constructor). */
        super(wrk, inp, inpOff, out, outOff);
        if (getRank() != ${rank}) {
            throw new IllegalArgumentException("Input and output spaces must be ${rank}D");
        }
        //# for k in 1:${rank}
        //#     eval km1 = ${rank} - ${k}
        this.dim${k} = workShape.dimension(${km1});
        //# end
        this.R = new PushPullOperator(workShape, out.getShape(),
                                      outputOffsets, fastOutput);
        this.S = new PushPullOperator(workShape, inp.getShape(),
                                      inputOffsets, fastInput);
    }

    /** Create low-level FFT operator. */
    private final void createFFT() {
        if (fft == null) {
            //# def dimList = dim1
            //# for k in 2:${rank}
            //#     def dimList = ${dimList}, dim${k}
            //# end
            fft = new ${Type}FFT_${rank}D(${dimList});
        }
    }

    /** Apply in-place forward complex FFT. */
    @Override
    public final void forwardFFT(${type} z[]) {
        if (z.length != 2*getNumberOfFrequencies()) {
            throw new IllegalArgumentException("Bad argument size");
        }
        timerForFFT.resume();
        if (fft == null) {
            createFFT();
        }
        fft.complexForward(z);
        timerForFFT.stop();
    }

    /** Apply in-place backward complex FFT. */
    @Override
    public final void backwardFFT(${type} z[]) {
        if (z.length != 2*getNumberOfFrequencies()) {
            throw new IllegalArgumentException("Bad argument size");
        }
        timerForFFT.resume();
        if (fft == null) {
            createFFT();
        }
        fft.complexInverse(z, false);
        timerForFFT.stop();
    }

    @Override
    public void push(${type} z[], ${type} x[], boolean adjoint) {
        if (adjoint) {
            R.push(z, x);
        } else {
            S.push(z, x);
        }
    }

    @Override
    public void pull(${type} x[], ${type} z[], boolean adjoint) {
        if (adjoint) {
            S.pull(x, z);
        } else {
            R.pull(x, z);
        }
    }

    //# // Define some macros for indexing in the different regions delimited
    //# // by the crop operator ('all' if to cover all the dimension, 'beg' is
    //# // before the cropped region, 'mid' is inside the cropped region and
    //# // 'end' is after the cropped region).
    //#
    //# suspend k
    //# def all = int i${k} = 0; i${k} < dim${k}; ++i${k}
    //# def beg = int i${k} = 0; i${k} < off${k}; ++i${k}
    //# def mid = int i${k} = off${k}; i${k} < end${k}; ++i${k}
    //# def end = int i${k} = end${k}; i${k} < dim${k}; ++i${k}
    //#
    //# def k = 1
    //# def i1_in_all = ${all}
    //# def i1_in_beg = ${beg}
    //# def i1_in_mid = ${mid}
    //# def i1_in_end = ${end}
    //#
    //# def k = 2
    //# def i2_in_all = ${all}
    //# def i2_in_beg = ${beg}
    //# def i2_in_mid = ${mid}
    //# def i2_in_end = ${end}
    //#
    //# def k = 3
    //# def i3_in_all = ${all}
    //# def i3_in_beg = ${beg}
    //# def i3_in_mid = ${mid}
    //# def i3_in_end = ${end}
    //#
    //# undef k all beg mid end

    private class PushPullOperator {
        /** Internal and external spaces have the same dimensions. */
        private final boolean fast;

        //# for k in 1:${rank}
        //#     def kth = ${}{nth_${k}}
        /** Offset of region along ${kth} input dimension. */
        private final int off${k};

        //# end
        //# for k in 1:${rank}
        //#     def kth = ${}{nth_${k}}
        /** End of region along ${kth} input dimension. */
        private final int end${k};

        //# end
        /**
         * Create a real-complex push/pull operator.
         *
         * <p> A push/pull operator is in charge of exchanging the contents of
         * vectors between an internal space (the work space with complex
         * values) and an external space (the user space with real values). The
         * dimensions of the user space must be smaller or equal those of the
         * work space. This method assumes that the arguments are valid (in
         * fact they have been already checked by the constructors of the
         * {@link Convolution} class). </p>
         *
         * @param wrk
         *        The dimensions of the work space.
         *
         * @param usr
         *        The dimensions of the user space.
         *
         * @param off
         *        The offsets of the user space relative to the work space.
         *
         * @param fast
         *        True if user and work spaces have the same dimensions;
         *        false otherwise.
         */
        private PushPullOperator(Shape wrk, Shape usr, int[] off, boolean fast) {
            this.fast = fast;
            //# for k in 1:${rank}
            //#     eval km1 = ${k} - 1
            this.off${k} = off[${km1}];
            this.end${k} = off${k} + usr.dimension(${km1});
            //# end
        }

        /** Set contents of work array. */
        private void push(final ${type}[] z, final ${type}[] x) {
            final ${type} zero = 0;
            if (fast) {
                /* User and work spaces have the same size. */
                for (int j = 0, k = 0; j < x.length; ++j, k += 2) {
                    z[k] = x[j];
                    z[k+1] = zero;
                }
            } else {
                /* User space is smaller than work space. */
                int j = 0; // index in x array
                int k = 0; // index of real part in z array
                //# if ${rank} == 1
                for (${i1_in_beg}, k += 2) {
                    z[k] = zero;
                    z[k+1] = zero;
                }
                for (${i1_in_mid}, ++j, k += 2) {
                    z[k] = x[j];
                    z[k+1] = zero;
                }
                for (${i1_in_end}, k += 2) {
                    z[k] = zero;
                    z[k+1] = zero;
                }
                //# elif ${rank} == 2
                for (${i2_in_beg}) {
                    for (${i1_in_all}, k += 2) {
                        z[k] = zero;
                        z[k+1] = zero;
                    }
                }
                for (${i2_in_mid}) {
                    for (${i1_in_beg}, k += 2) {
                        z[k] = zero;
                        z[k+1] = zero;
                    }
                    for (${i1_in_mid}, ++j, k += 2) {
                        z[k] = x[j];
                        z[k+1] = zero;
                    }
                    for (${i1_in_end}, k += 2) {
                        z[k] = zero;
                        z[k+1] = zero;
                    }
                }
                for (${i2_in_end}) {
                    for (${i1_in_all}, k += 2) {
                        z[k] = zero;
                        z[k+1] = zero;
                    }
                }
                //# elif ${rank} == 3
                for (${i3_in_beg}) {
                    for (${i2_in_all}) {
                        for (${i1_in_all}, k += 2) {
                            z[k] = zero;
                            z[k+1] = zero;
                        }
                    }
                }
                for (${i3_in_mid}) {
                    for (${i2_in_beg}) {
                        for (${i1_in_all}, k += 2) {
                            z[k] = zero;
                            z[k+1] = zero;
                        }
                    }
                    for (${i2_in_mid}) {
                        for (${i1_in_beg}, k += 2) {
                            z[k] = zero;
                            z[k+1] = zero;
                        }
                        for (${i1_in_mid}, ++j, k += 2) {
                            z[k] = x[j];
                            z[k+1] = zero;
                        }
                        for (${i1_in_end}, k += 2) {
                            z[k] = zero;
                            z[k+1] = zero;
                        }
                    }
                    for (${i2_in_end}) {
                        for (${i1_in_all}, k += 2) {
                            z[k] = zero;
                            z[k+1] = zero;
                        }
                    }
                }
                for (${i3_in_end}) {
                    for (${i2_in_all}) {
                        for (${i1_in_all}, k += 2) {
                            z[k] = zero;
                            z[k+1] = zero;
                        }
                    }
                }
                //# else
                //#     error only 1D, 2D and 3D implemented
                //# end
            }
        }

        /** Extract contents of work array. */
        private void pull(final ${type}[] x, final ${type}[] z) {
            if (fast) {
                /* User and work spaces have the same size. */
                for (int j = 0, k = 0; j < x.length; ++j, k += 2) {
                    x[j] = z[k];
                }
            } else {
                /* User space is smaller than work space. */
                int j = 0; // index in x array
                //# if ${rank} == 1
                int k = off1*2; // index of real part in z array
                for (${i1_in_mid}, ++j, k += 2) {
                    x[j] = z[k];
                }
                //# elif ${rank} == 2
                int k; // index of real part in z array
                for (${i2_in_mid}) {
                    k = (off1 + dim1*i2)*2;
                    for (${i1_in_mid}, ++j, k += 2) {
                        x[j] = z[k];
                    }
                }
                //# elif ${rank} == 3
                int k; // index of real part in z array
                for (${i3_in_mid}) {
                    for (${i2_in_mid}) {
                        k = (off1 + dim1*(i2 + dim3*i3))*2;
                        for (${i1_in_mid}, ++j, k += 2) {
                            x[j] = z[k];
                        }
                    }
                }
                //# else
                //#     error only 1D, 2D and 3D implemented
                //# end
            }
        }
    }

}
