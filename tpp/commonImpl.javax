//# // This file is part of TiPi (a Toolkit for Inverse Problems and Imaging)
//# // developed by the MitiV project.
//# //
//# // Copyright (c) 2014 the MiTiV project, http://mitiv.univ-lyon1.fr/
//# //
//# // Permission is hereby granted, free of charge, to any person obtaining a
//# // copy of this software and associated documentation files (the
//# // "Software"), to deal in the Software without restriction, including
//# // without limitation the rights to use, copy, modify, merge, publish,
//# // distribute, sublicense, and/or sell copies of the Software, and to
//# // permit persons to whom the Software is furnished to do so, subject to
//# // the following conditions:
//# //
//# // The above copyright notice and this permission notice shall be included
//# // in all copies or substantial portions of the Software.
//# //
//# // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//# // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//# // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
//# // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
//# // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//# // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
//# // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//# // ------------------------------------------------------------------------
//#
//# // We predefine some macros to deal with the different possible ranks.
//# // We can sefely assume that ${rank} >= 1, 0-rank arrays are handled
//# // elsewhere (in the {Byte,Short,Int,Long,Float,Double}Scalar.java
//# // classes with code source in TypeScalar.javax).
//#
//# // Get common definitions.
//# include <common.javax>
//#
//# // Define the name of the class and its superclass.
//# if ${rank} == 0
//#     def superName = ${Type}Scalar
//# else
//#     def superName = ${Type}${rank}D
//# end
//# def className = ${implPrefix}${superName}
//#
//# // Be prepared to deal with different types.
//# if ${type_id} == ${FLOAT}
//#   def zero = 0.0F
//# elif ${type_id} == ${DOUBLE}
//#   def zero = 0.0
//# else
//#   def zero = 0
//# end
//#
package mitiv.array.impl;

//# eval reducedRank = ${rank} - 1
//# if ${reducedRank} == 0
//#     def reducedSuperName = ${Type}Scalar
//#     def reducedClassName = ${Type}Scalar
//# else
//#     def reducedSuperName = ${Type}${reducedRank}D
//#     def reducedClassName = ${implPrefix}${reducedSuperName}
//# end
//# if ${rank} > 1
import mitiv.array.${Type}1D;
//# end
//# if ${reducedRank} > 1
import mitiv.array.${reducedSuperName};
//# end
import mitiv.array.${superName};
//# if ${reducedRank} == 0
import mitiv.array.${reducedSuperName};
//# end
import mitiv.base.indexing.Range;
import mitiv.base.mapping.${Type}Function;
import mitiv.base.mapping.${Type}Scanner;
import mitiv.random.${Type}Generator;
