/*
 * This file is part of TiPi (a Toolkit for Inverse Problems and Imaging)
 * developed by the MitiV project.
 *
 * Copyright (c) 2014 the MiTiV project, http://mitiv.univ-lyon1.fr/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

//# include <common.javax>
//# if ${type_id} != ${DOUBLE}
//#     def cast = (${type})
//#     def zero = 0.0F
//#     def one  = 1.0F
//# else
//#     def cast =
//#     def zero = 0.0
//#     def one  = 1.0
//# end
package mitiv.deconv.impl;

import mitiv.array.ShapedArray;
import mitiv.linalg.Vector;
import mitiv.linalg.shaped.${Type}ShapedVector;
import mitiv.linalg.shaped.ShapedVector;
import mitiv.linalg.shaped.ShapedVectorSpace;

/**
 * Implements a FFT-based weighted convolution for ${rank}D arrays of ${type}'s.
 *
 * <p>
 * It is recommended not to directly instantiate this class but rather use
 * one of the factory methods of the parent class
 * {@link  WeightedConvolutionOperator}.{@code build()}.  Have a look at the
 * documentation of {@link  WeightedConvolutionOperator} for a description
 * of what exaclty does this kind of operator.
 * </p>
 * @author Éric Thiébaut
 *
 * @see {@link WeightedConvolutionOperator}
 */
public class ${className}
     extends WeightedConvolution${Type}
{
    /** Factor to scale the result of the backward FFT. */
    private final ${type} scale;

    /** Number of variables. */
    private final int number;

    //# for k in 1:${rank}
    //#     def kth = ${}{nth_${k}}
    /** Number of element along ${kth} dimension of the variables. */
    private final int dim${k};

    /** Offset of data along ${kth} dimension. */
    private final int off${k};

    /** End of data along ${kth} dimension. */
    private final int end${k};

    //# end
    /** Convolution operator. */
    private final Convolution${Type}${rank}D cnvl;

    /**
     * Create a new FFT-based weighted convolution cost function.
     *
     * @param objectSpace - The object space.
     * @param dataSpace   - The data space.
     * @param dataOffset  - The position of the data space relative
     *                      to the object space.
     */
    public ${className}(ShapedVectorSpace objectSpace,
            ShapedVectorSpace dataSpace, int[] dataOffset) {
        /* Initialize super class and check rank and dimensions (element type
           is checked by the super class constructor). */
        super(objectSpace, dataSpace);
        if (objectSpace.getRank() != ${rank}) {
            throw new IllegalArgumentException("Object space is not ${rank}D");
        }
        if (dataSpace.getRank() != ${rank}) {
            throw new IllegalArgumentException("Data space is not ${rank}D");
        }
        number = (int)objectSpace.getNumber();
        scale = ${one}/number;
        //# for k in 1:${rank}
        //#     eval km1 = ${k} - 1
        //#     def  kth = ${}{nth_${k}}
        dim${k} = objectSpace.getDimension(${km1});
        off${k} = dataOffset[${km1}];
        if (off${k} < 0 || off${k} >= dim${k}) {
            throw new IllegalArgumentException("Out of range offset along ${kth} dimension");
        }
        end${k} = off${k} + dataSpace.getDimension(${km1});
        if (end${k} > dim${k}) {
            throw new IllegalArgumentException("Data (+ offset) beyond ${kth} dimension");
        }
        //# end
        cnvl = new Convolution${Type}${rank}D(objectSpace);
    }

    //# // Define some macros for indexing in the different regions delimited
    //# // by the crop operator ('all' if to cover all the dimension, 'beg' is
    //# // before the cropped region, 'mid' is inside the cropped region and
    //# // 'end' is after the cropped region).
    //#
    //# suspend k
    //# def all = int i${k} = 0; i${k} < dim${k}; ++i${k}
    //# def beg = int i${k} = 0; i${k} < off${k}; ++i${k}
    //# def mid = int i${k} = off${k}; i${k} < end${k}; ++i${k}
    //# def end = int i${k} = end${k}; i${k} < dim${k}; ++i${k}
    //# def k = 1
    //# def i1_in_all = ${all}
    //# def i1_in_beg = ${beg}
    //# def i1_in_mid = ${mid}
    //# def i1_in_end = ${end}
    //# def k = 2
    //# def i2_in_all = ${all}
    //# def i2_in_beg = ${beg}
    //# def i2_in_mid = ${mid}
    //# def i2_in_end = ${end}
    //# def k = 3
    //# def i3_in_all = ${all}
    //# def i3_in_beg = ${beg}
    //# def i3_in_mid = ${mid}
    //# def i3_in_end = ${end}
    //#
    //# undef k all beg mid end

    @Override
    protected double cost(double alpha, Vector x) {
        /* Check whether instance has been fully initialized. */
        checkSetup();

        /* Compute the convolution. */
        cnvl.push(((${Type}ShapedVector)x).getData(), false);
        cnvl.convolve(false);

        /* Integrate cost. */
        double sum = 0.0;
        ${type} z[] = cnvl.getWorkspace();
        int j = 0; // index in data and weight arrays
        //# if ${rank} == 1
        int k = 2*off1; // index in work array z
        if (wgt == null) {
            for (${i1_in_mid}) {
                ${type} r = scale*z[k] - dat[j];
                sum += r*r;
                j += 1;
                k += 2;
            }
        } else {
            for (${i1_in_mid}) {
                ${type} w = wgt[j];
                ${type} r = scale*z[k] - dat[j];
                sum += w*r*r;
                j += 1;
                k += 2;
            }
        }
        //# elif ${rank} == 2
        int k; // index in work array z
        if (wgt == null) {
            for (${i2_in_mid}) {
                k = 2*(off1 + dim1*i2);
                for (${i1_in_mid}) {
                    ${type} r = scale*z[k] - dat[j];
                    sum += r*r;
                    j += 1;
                    k += 2;
                }
            }
        } else {
            for (${i2_in_mid}) {
                k = 2*(off1 + dim1*i2);
                for (${i1_in_mid}) {
                    ${type} w = wgt[j];
                    ${type} r = scale*z[k] - dat[j];
                    sum += w*r*r;
                    j += 1;
                    k += 2;
                }
            }
        }
        //# elif ${rank} == 3
        int k; // index in work array z
        if (wgt == null) {
            for (${i3_in_mid}) {
                for (${i2_in_mid}) {
                    k = 2*(off1 + dim1*(i2 + dim2*i3));
                    for (${i1_in_mid}) {
                        ${type} r = scale*z[k] - dat[j];
                        sum += r*r;
                        j += 1;
                        k += 2;
                    }
                }
            }
        } else {
            for (${i3_in_mid}) {
                for (${i2_in_mid}) {
                    k = 2*(off1 + dim1*(i2 + dim2*i3));
                    for (${i1_in_mid}) {
                        ${type} w = wgt[j];
                        ${type} r = scale*z[k] - dat[j];
                        sum += w*r*r;
                        j += 1;
                        k += 2;
                    }
                }
            }
        }
        //# else
        //#     error only 1D, 2D and 3D implemented
        //# end
        return alpha*sum/2;
    }

    @Override
    protected double cost(double alpha, Vector x, Vector gx, boolean clr) {
        /* Check whether instance has been fully initialized. */
        checkSetup();

        /* Compute the convolution. */
        cnvl.push(((${Type}ShapedVector)x).getData(), false);
        cnvl.convolve(false);

        /* Integrate cost and gradient. */
        final boolean weighted = (wgt != null);
        final ${type} q = scale*${cast}alpha;
        double sum = 0.0;
        ${type} z[] = cnvl.getWorkspace();
        int j = 0; // index in data and weight arrays
        int k = 0; // index in work array z
        //# if ${rank} == 1
        for (${i1_in_beg}) {
            z[k] = ${zero};
            z[k+1] = ${zero};
            k += 2;
        }
        if (weighted) {
            for (${i1_in_mid}) {
                ${type} w = wgt[j];
                ${type} r = scale*z[k] - dat[j];
                ${type} wr = w*r;
                sum += r*wr;
                z[k] = q*wr;
                z[k+1] = ${zero};
                j += 1;
                k += 2;
            }
        } else {
            for (${i1_in_mid}) {
                ${type} r = scale*z[k] - dat[j];
                sum += r*r;
                z[k] = q*r;
                z[k+1] = ${zero};
                j += 1;
                k += 2;
            }
        }
        for (${i1_in_end}) {
            z[k] = ${zero};
            z[k+1] = ${zero};
            k += 2;
        }
        //# elif ${rank} == 2
        for (${i2_in_beg}) {
            for (${i1_in_all}) {
                z[k] = ${zero};
                z[k+1] = ${zero};
                k += 2;
            }
        }
        for (${i2_in_mid}) {
            for (${i1_in_beg}) {
                z[k] = ${zero};
                z[k+1] = ${zero};
                k += 2;
            }
            if (weighted) {
                for (${i1_in_mid}) {
                    ${type} w = wgt[j];
                    ${type} r = scale*z[k] - dat[j];
                    ${type} wr = w*r;
                    sum += r*wr;
                    z[k] = q*wr;
                    z[k+1] = ${zero};
                    j += 1;
                    k += 2;
                }
            } else {
                for (${i1_in_mid}) {
                    ${type} r = scale*z[k] - dat[j];
                    sum += r*r;
                    z[k] = q*r;
                    z[k+1] = ${zero};
                    j += 1;
                    k += 2;
                }
            }
            for (${i1_in_end}) {
                z[k] = ${zero};
                z[k+1] = ${zero};
                k += 2;
            }
        }
        for (${i2_in_end}) {
            for (${i1_in_all}) {
                z[k] = ${zero};
                z[k+1] = ${zero};
                k += 2;
            }
        }
        //# elif ${rank} == 3
        for (${i3_in_beg}) {
            for (${i2_in_all}) {
                for (${i1_in_all}) {
                    z[k] = ${zero};
                    z[k+1] = ${zero};
                    k += 2;
                }
            }
        }
        for (${i3_in_mid}) {
            for (${i2_in_beg}) {
                for (${i1_in_all}) {
                    z[k] = ${zero};
                    z[k+1] = ${zero};
                    k += 2;
                }
            }
            for (${i2_in_mid}) {
                for (${i1_in_beg}) {
                    z[k] = ${zero};
                    z[k+1] = ${zero};
                    k += 2;
                }
                if (weighted) {
                    for (${i1_in_mid}) {
                        ${type} w = wgt[j];
                        ${type} r = scale*z[k] - dat[j];
                        ${type} wr = w*r;
                        sum += r*wr;
                        z[k] = q*wr;
                        z[k+1] = ${zero};
                        j += 1;
                        k += 2;
                    }
                } else {
                    for (${i1_in_mid}) {
                        ${type} r = scale*z[k] - dat[j];
                        sum += r*r;
                        z[k] = q*r;
                        z[k+1] = ${zero};
                        j += 1;
                        k += 2;
                    }
                }
                for (${i1_in_end}) {
                    z[k] = ${zero};
                    z[k+1] = ${zero};
                    k += 2;
                }
            }
            for (${i2_in_end}) {
                for (${i1_in_all}) {
                    z[k] = ${zero};
                    z[k+1] = ${zero};
                    k += 2;
                }
            }
        }
        for (${i3_in_end}) {
            for (${i2_in_all}) {
                for (${i1_in_all}) {
                    z[k] = ${zero};
                    z[k+1] = ${zero};
                    k += 2;
                }
            }
        }
        //# else
        //#     error only 1D, 2D and 3D implemented
        //# end

        /* Finalize computation of gradient. */
        ${type} g[] = ((${Type}ShapedVector)gx).getData();
        cnvl.convolve(true);
        if (clr) {
            for (j = 0, k = 0; j < number; ++j, k += 2) {
                g[j] = z[k];
            }
        } else {
            for (j = 0, k = 0; j < number; ++j, k += 2) {
                g[j] += z[k];
            }
        }

        /* Returns cost. */
        return alpha*sum/2;
    }

    @Override
    public void setPSF(ShapedArray psf, int[] off) {
        cnvl.setPSF(psf, off);
    }

    @Override
    public void setPSF(ShapedVector psf) {
        cnvl.setPSF(psf);
    }
}
