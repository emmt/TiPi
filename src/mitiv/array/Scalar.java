// *WARNING* This file has been automatically generated by TPP do not edit directly.
/*
 * This file is part of TiPi (a Toolkit for Inverse Problems and Imaging)
 * developed by the MitiV project.
 *
 * Copyright (c) 2014 the MiTiV project, http://mitiv.univ-lyon1.fr/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package mitiv.array;
import mitiv.base.Shape;


/**
 * Define abstract class for scalar arrays of rank 0.
 *
 * @author Éric Thiébaut.
 */
public abstract class Scalar implements ShapedArray {
    static protected Shape shape = Shape.scalarShape;
    static protected final int number = 1;

    /*
     * The following constructors make this class non instantiable, but still
     * let others inherit from this class.
     */
    protected Scalar() {
    }

    protected Scalar(int[] dims) {
        this(new Shape(dims));
    }

    protected Scalar(Shape shape) {
        if (shape.rank() != 0) {
            throw new IllegalArgumentException("Bad number of dimensions for 0-D array");
        }
    }

    @Override
    public final int getRank() {
        return 0;
    }

    @Override
    public final Shape getShape() {
        return shape;
    }

    @Override
    public final int getNumber() {
        return number;
    }

    @Override
    public final int getDimension(int k) {
        return shape.dimension(k);
    }
    
   /**
     * Change the shape of the array. The total number of elements should be preserved.
     *
     * @param shape new shape.
     */
    public final void  reshape(Shape shape) {
    if (this.number == (int)shape.number()){
        this.shape = shape; 
        
        }else{
        throw new IllegalArgumentException("The new shape is not commensurate with the old shape");
        }
    }

    public final Scalar movedims( int initpos, int finalpos){
     
        if ((finalpos > 0)||(initpos > 0)){
            throw new IllegalArgumentException("The permutation should not change the rank");
        }
            return this.copy();
        }
    
    @Override
    public abstract Scalar copy();

    /**
     * Get a view of the scalar as a 1D array.
     *
     * @return A 1D view of the scalar.
     */
    public abstract Array1D as1D();

}
