/*
 * This file is part of TiPi (a Toolkit for Inverse Problems and Imaging)
 * developed by the MitiV project.
 *
 * Copyright (c) 2014 the MiTiV project, http://mitiv.univ-lyon1.fr/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

//# // Get common definitions.
//# include <common.javax>
//#
//# // Define the name of the class.
//# if ${rank} == 0
//#     def className = Scalar
//# else
//#     def className = Array${rank}D
//# end
package ${package};
import mitiv.base.Shape;
//# if ${rank} >= 1
import mitiv.base.Shaped;
import mitiv.base.indexing.Range;
//# end


//# if ${rank} == 0
//#     def adjective = scalar
//# elif ${rank} == 1
//#     def adjective = mono-dimensional
//# else
//#     def adjective = multi-dimensional
//# end
/**
 * Define abstract class for ${adjective} arrays of rank ${rank}.
 *
 * @author Éric Thiébaut.
 */
public abstract class ${className} implements ShapedArray {
    //# def scope = protected final
    //# if ${rank} == 0
    static ${scope} Shape shape = Shape.scalarShape;
    static ${scope} int number = 1;
    //# else
    ${scope} Shape shape;
    ${scope} int number;
    //#     for k in 1 : ${rank}
    ${scope} int dim${k};
    //#         if ${k} == 1
    //#             def productOfDimensions = dim${k}
    //#         else
    //#             def productOfDimensions = ${productOfDimensions}*dim${k}
    //#         end
    //#     end
    //# end

    /*
     * The following constructors make this class non instantiable, but still
     * let others inherit from this class.
     */
    //# def argType = int
    //# def argName = dim
    //# def dimList =
    //# def argList =
    //# for k in 1 : ${rank}
    //#     def arg = ${argName}${k}
    //#     if ${k} == 1
    //#         def dimList = ${arg}
    //#         def argList = ${argType} ${arg}
    //#     else
    //#         def dimList = ${dimList}, ${arg}
    //#         def argList = ${argList}, ${argType} ${arg}
    //#     end
    //# end
    protected ${className}(${argList}) {
        //# if ${rank} >= 1
        shape = new Shape(${dimList});
        if (shape.number() > Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Total number of elements is too large.");
        }
        number = (int)shape.number();
        //#     for k in 1 : ${rank}
        this.dim${k} = dim${k};
        //#     end
        //# end
    }

    protected ${className}(int[] dims) {
        this(new Shape(dims));
    }

    protected ${className}(Shape shape) {
        if (shape.rank() != ${rank}) {
            throw new IllegalArgumentException("Bad number of dimensions for ${rank}-D array.");
        }
        //# if ${rank} >= 1
        if (shape.number() > Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Total number of elements is too large.");
        }
        this.number = (int)shape.number();
        this.shape = shape;
        //#     for k in 1 : ${rank}
        //#         eval j = ${k} - 1
        this.dim${k} = shape.dimension(${j});
        //#     end
        //# end
    }

    @Override
    public final int getRank() {
        return ${rank};
    }

    @Override
    public final Shape getShape() {
        return shape;
    }

    @Override
    public final int getNumber() {
        return number;
    }

    @Override
    public final int getDimension(int k) {
        return shape.dimension(k);
    }

    @Override
    public abstract ${className} copy();

    //# if ${rank} >= 1
    //#    eval reducedRank = ${rank} - 1
    //#    if ${reducedRank} == 0
    //#        def reducedClassName = Scalar
    //#    else
    //#        def reducedClassName = Array${reducedRank}D
    //#    end
    /**
     * Get a slice of the array.
     *
     * @param idx - The index of the slice along the last dimension of
     *              the array.  The same indexing rules as for
     *              {@link mitiv.base.indexing.Range} apply for negative
     *              index: 0 for the first, 1 for the second, -1 for the
     *              last, -2 for penultimate, <i>etc.</i>
     * @return A ${reducedClassName} view on the given slice of the array.
     */
    public abstract ${reducedClassName} slice(int idx);

    /**
     * Get a slice of the array.
     *
     * @param idx - The index of the slice along the last dimension of
     *              the array.
     * @param dim - The dimension to slice.  For these two arguments,
     *              the same indexing rules as for
     *              {@link mitiv.base.indexing.Range} apply for negative
     *              index: 0 for the first, 1 for the second, -1 for the
     *              last, -2 for penultimate, <i>etc.</i>
     *
     * @return A ${reducedClassName} view on the given slice of the array.
     */
    public abstract ${reducedClassName} slice(int idx, int dim);

    //# if ${rank} > 1
    //#     def s = s
    //# else
    //#     def s =
    //# end
    /**
     * Get a view of the array for given range${s} of indices.
     *
     //# def k = 0
     //# def argType = Range
     //# def argName = rng
     //# for k in 1:${rank}
     //#     if ${k} == 1
     //#         def argList = ${argType} ${argName}${k}
     //#     else
     //#         def argList = ${argList}, ${argType} ${argName}${k}
     //#     end
     //#     def kth = ${}{nth_${k}}
     * @param ${argName}${k} - The range of indices to select along ${kth} dimension
     *               (or {@code null} to select all.
     //# end
     *
     * @return A ${className} view for the given range${s} of the array.
     */
    public abstract ${className} view(${argList});

    /**
     * Get a view of the array for given range${s} of indices.
     *
     //# def k = 0
     //# def argType = int[]
     //# def argName = idx
     //# for k in 1:${rank}
     //#     if ${k} == 1
     //#         def argList = ${argType} ${argName}${k}
     //#     else
     //#         def argList = ${argList}, ${argType} ${argName}${k}
     //#     end
     //#     def kth = ${}{nth_${k}}
     * @param ${argName}${k} - The list of indices to select along ${kth} dimension
     *               (or {@code null} to select all.
     //# end
     *
     * @return A ${className} view for the given index selection${s} of the
     *         array.
     */
    public abstract ${className} view(${argList});

    //#end // for ${rank} >= 1
    //#
    //# if ${rank} == 0
    //#     def obj = scalar
    //# else
    //#     def obj = array
    //# end
    /**
     * Get a view of the ${obj} as a 1D array.
     *
     * @return A 1D view of the ${obj}.
     */
    public abstract Array1D as1D();

    //# if ${rank} >= 1
    /**
     * Check the parameters of a ${rank}D view with strides and get ordering.
     * @param number  - The number of elements in the wrapped array.
     //# for k in 1:${rank}
     //#   def k_th = ${}{nth_${k}}
     * @param dim${k}    - The ${k_th} dimension of the ${rank}D view.
     //# end
     * @param offset  - The offset of element (${zeroList}) of the ${rank}D view.
     //# for k in 1:${rank}
     //#   def k_th = ${}{nth_${k}}
     * @param stride${k} - The stride along the ${k_th} dimension.
     //# end
     * @return The ordering: {@link Shaped#COLUMN_MAJOR},
     *         {@link Shaped#ROW_MAJOR}, or {@link Shaped#NONSPECIFIC_ORDER}.
     * @throws IndexOutOfBoundsException
     */
    public static int checkViewStrides(int number, int offset, ${declStrideList}, ${declDimList}) {
        int imin, imax, itmp;
        //# for k in 1 : ${rank}
        itmp = (dim${k} - 1)*stride${k};
        //#     if ${k} == 1
        if (itmp >= 0) {
            imin = offset;
            imax = offset + itmp;
        } else {
            imin = offset + itmp;
            imax = offset;
        }
        //#     else
        if (itmp >= 0) {
            imax += itmp;
        } else {
            imin += itmp;
        }
        //#     end
        //# end
        if (imin < 0 || imax >= number) {
            throw new IndexOutOfBoundsException("${rank}D view is not within available space");
        }
        //# if ${rank} == 1
        return COLUMN_MAJOR;
        //# else
        //#     def isColumnMajor = s1 <= s2 // to check column major order
        //#     def isRowMajor    = s1 >= s2 // to check row major order
        //#     for k in 1 : ${rank}
        int s${k} = Math.abs(stride${k});
        //#         if ${k} >= 3
        //#             eval j = ${k} - 1
        //#             def isColumnMajor = ${isColumnMajor} && s${j} <= s${k}
        //#             def isRowMajor =       ${isRowMajor} && s${j} >= s${k}
        //#         end
        //#     end
        if (${isColumnMajor}) {
            return COLUMN_MAJOR;
        } else if (${isRowMajor}) {
            return ROW_MAJOR;
        } else {
            return NONSPECIFIC_ORDER;
        }
        //# end
    }

    //# end
}

/*
 * Local Variables:
 * mode: Java
 * tab-width: 8
 * indent-tabs-mode: nil
 * c-basic-offset: 4
 * fill-column: 78
 * coding: utf-8
 * ispell-local-dictionary: "american"
 * End:
 */
